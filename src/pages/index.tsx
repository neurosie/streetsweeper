import Head from "next/head";
import { Combobox } from "@headlessui/react";
import { useDebounce } from "@uidotdev/usehooks";
import { useState } from "react";
import { type Place } from "~/server/api/routers/search";
import { api } from "~/utils/api";
import LinkButton from "~/components/LinkButton";
import Link from "next/link";

export default function Home() {
  const [selectedPlace, setSelectedPlace] = useState<Place | null>(null);
  return (
    <>
      <Head>
        <title>StreetSweeper</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* whole page */}
      <div className="flex min-h-[100svh] flex-col items-center">
        <div className="flex flex-col items-center gap-4 pt-8 sm:pt-16">
          <h1 className="rounded-xl bg-sign-800 px-4 py-2 text-4xl font-semibold text-white shadow-md ring-2 ring-sign-800 ring-offset-[6px] ring-offset-white  sm:text-6xl">
            StreetSweeper
          </h1>
          <p className="italic text-gray-800">A local geography trivia game</p>
        </div>
        {/* container for centering main content */}
        <div className="flex w-full flex-col items-center justify-around px-4 py-8">
          {/* main content box */}
          <div className="flex w-full flex-col items-center justify-center gap-12 rounded-md bg-white px-8 py-8 shadow-md sm:w-[600px]">
            <p>
              Choose a city or town in the United States, and see how many
              streets you can name!
            </p>
            <SearchBox
              selectedPlace={selectedPlace}
              onSelectPlace={setSelectedPlace}
            />
            <LinkButton
              disabled={selectedPlace === null}
              href={selectedPlace ? `play/${selectedPlace.osm_id}` : ""}
            >
              <div
                className={
                  "rounded-lg bg-sign-800 px-16 py-3 text-2xl font-semibold text-white ring-1 ring-sign-800 ring-offset-2 ring-offset-white " +
                  (selectedPlace ? "" : "opacity-50")
                }
              >
                PLAY
              </div>
            </LinkButton>
          </div>
        </div>
        <p className="mt-auto p-2 text-gray-700">
          Created by{" "}
          <Link
            className="font-semibold text-gray-900"
            href="https://github.com/neurosie"
          >
            Hayes Neuman
          </Link>
        </p>
      </div>
    </>
  );
}

function SearchBox({
  selectedPlace,
  onSelectPlace,
}: {
  selectedPlace: Place | null;
  onSelectPlace: (place: Place | null) => void;
}) {
  const [searchTerm, setSearchTerm] = useState("");
  const debouncedSearchTerm = useDebounce(searchTerm, 1000);

  return (
    <div className="sm:w-12/12 w-full">
      <Combobox value={selectedPlace} onChange={onSelectPlace}>
        <div className="relative mt-1">
          <div className="relative flex w-full cursor-default overflow-hidden rounded-lg bg-gray-200 py-4 text-left text-gray-500 focus-within:bg-white focus-within:text-gray-900 focus-within:shadow-md focus-within:ring-2 focus-within:ring-black focus-within:ring-opacity-75 focus-within:ring-offset-1 focus-within:ring-offset-white">
            <span className="relative bottom-[0.1em] pl-3 pr-2">
              {mapPinIcon}
            </span>
            <Combobox.Input
              className="w-full overflow-ellipsis border-none bg-inherit pr-2 text-lg leading-5 text-gray-900 outline-none placeholder:text-gray-500"
              onChange={(event) => setSearchTerm(event.target.value)}
              displayValue={(place: typeof selectedPlace) =>
                place?.display_name ?? ""
              }
              placeholder="Search for a city or town"
            />
          </div>
          {debouncedSearchTerm.length > 0 && (
            <Combobox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
              <SearchSuggestions searchTerm={debouncedSearchTerm} />
            </Combobox.Options>
          )}
        </div>
      </Combobox>
    </div>
  );
}

function SearchSuggestions({ searchTerm }: { searchTerm: string }) {
  const { status, data, error } = api.search.useQuery({
    query: searchTerm,
  });

  if (status === "loading") {
    return <span>loading...</span>;
  }
  if (status === "error") {
    return <span>Error: {error.message}</span>;
  }
  return (
    <div>
      {data
        .filter((entry) => entry.osm_type === "relation")
        .map((entry) => (
          <Combobox.Option
            key={entry.osm_id}
            className={({ active }) =>
              `relative cursor-default select-none px-4 py-2 ${
                active ? "bg-pink-600 text-white" : "text-gray-900"
              }`
            }
            value={entry}
          >
            {({ selected, active: _ }) => (
              <>
                <span
                  className={`block truncate ${
                    selected ? "font-medium" : "font-normal"
                  }`}
                >
                  {entry.display_name}
                </span>
              </>
            )}
          </Combobox.Option>
        ))}
    </div>
  );
}

// from heroicons.com, MIT license (https://opensource.org/license/mit/)
const mapPinIcon = (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 20 20"
    fill="currentColor"
    className="h-5 w-5"
  >
    <path
      fillRule="evenodd"
      d="M9.69 18.933l.003.001C9.89 19.02 10 19 10 19s.11.02.308-.066l.002-.001.006-.003.018-.008a5.741 5.741 0 00.281-.14c.186-.096.446-.24.757-.433.62-.384 1.445-.966 2.274-1.765C15.302 14.988 17 12.493 17 9A7 7 0 103 9c0 3.492 1.698 5.988 3.355 7.584a13.731 13.731 0 002.273 1.765 11.842 11.842 0 00.976.544l.062.029.018.008.006.003zM10 11.25a2.25 2.25 0 100-4.5 2.25 2.25 0 000 4.5z"
      clipRule="evenodd"
    />
  </svg>
);
